services:
  question-service:
    build:
      context: ./question-service
      dockerfile: Dockerfile.dev
    ports:
      - 8080:8080
    volumes:
      - ./question-service:/app
    environment:
      - MONGODB_URL=mongodb://mongo:27017/questions
      - QUESTIONS_URL=https://asia-southeast1-peerprep-cs3219.cloudfunctions.net/getQuestions
    depends_on:
      - mongo

  mongo:
    image: bitnami/mongodb:latest
    ports:
      - 27017:27017
    volumes:
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    depends_on:
      - mongo

  postgres:
    image: postgres:14-alpine
    ports:
      - "5001:5432"
    user: postgres
    environment:
      POSTGRES_PASSWORD: "123"
      POSTGRES_DB: "dev"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=123
      - PGDATABASE=dev
      - PGSSLMODE=disable
      - SECRET_KEY=secret
      - USER_SERVICE_PORT=3000
    volumes:
      - ./user-service:/app
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    user: rabbitmq
    image: rabbitmq:management
    container_name: rabbitmq
    restart: on-failure
    hostname: "dev-rabbitmq"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672" # amqp
      - "15672:15672" # management
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30

  matching-service:
    build:
      context: ./matching-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./matching-service:/app
    ports:
      - "8082:8082"
    environment:
      - USER_SERVICE_PORT=3000
      - COLLABORATION_SERVICE_PORT=3005
      - MATCHING_SERVICE_PORT=8082
      - QUESTION_SERVICE_PORT=8080
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
      collaboration-service:
        condition: service_healthy

  collaboration-service:
    build:
      context: ./collaboration-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./collaboration-service:/app
    ports:
      - "3005:3005"
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=123
      - PGDATABASE=dev
      - PGSSLMODE=disable
      - COLLABORATION_SERVICE_PORT=3005
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget --spider --no-verbose --tries=1 localhost:3005/ || exit 1
      interval: 5s
      timeout: 5s
      retries: 10

  history-service:
    build:
      context: ./history-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./history-service:/app
    ports:
      - "3008:3008"
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=123
      - PGDATABASE=dev
      - PGSSLMODE=disable
      - HISTORY_SERVICE_PORT=3008
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  front-end:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - "./frontend/src:/app/src"
      - "./frontend/vite.config.ts:/app/vite.config.ts"
    ports:
      - "5173:5173"

  collab-ws-server:
    build: ./collab-ws-server
    ports:
      - 4444:4444
volumes:
  postgres:
